#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Prefixes each i3status line with some custom information. Adapted from
#   http://code.stapelberg.de/git/i3status/tree/contrib/wrapper.py
#
# To use it, ensure your ~/.i3status.conf contains this line:
#     output_format = "i3bar"
# in the 'general' section.
# Then, in the 'bar' section of your ~/.i3/config, use:
#     status_command i3status-wrapper

import sys
import json
import math
import subprocess
import threading
import re
import string

import netusage
import backlight
import numformat

CPU_HISTORY_LEN = 12

YELLOW = '#FFFF00'

light = backlight.Backlight()
netStats = netusage.Stats()


def readLine(f):
  """ Reads one line of text from file 'f'. """
  # Try reading a line, removing any extra whitespace.
  try:
    line = f.readline().strip()
    # This method is used to read text printed by i3status and i3bar. When these
    # programs send EOF or an empty line, it means we should exit.
    if not line:
      sys.exit(3)
    return line
  # Exit on ctrl-C.
  except KeyboardInterrupt:
    sys.exit()


def printLine(message):
  """ Non-buffered printing to stdout. """
  sys.stdout.write(message + '\n')
  sys.stdout.flush()
  

def replaceYesNoWithPlusMinus(text):
  """ Replaces "yes" with "+" and "no" with "-" to save space. """
  text = string.replace(text, ': yes', '+')
  text = string.replace(text, ': no', '-')
  return text
  
  
def formatByteRate(byteRate):
  """ Formats a network byte rate into three characters. """
  return numformat.shortBytes(byteRate, 1)


# Pattern for matching dates.
datePattern = re.compile(r' [0-9][0-9]\-[0-9][0-9] ')

def service_i3status():
  """ Runs i3status as a subprocess and passes the output to stdout, making
  some modifications to add cool features that i3status doesn't support.
  """
  # Run i3status and capture its output.
  i3status = subprocess.Popen("i3status", stdout=subprocess.PIPE,
                              shell=True).stdout

  # Keep a little history of CPU usages to display in a bar graph. This history
  # is actually just a string of bar-graph characters.
  cpuGraph = numformat.roundToVerticalBar(0) * CPU_HISTORY_LEN

  # The first line from i3status is the version header. Modify the header
  # to enable click events, and then send it out to i3bar.
  versionHeader = json.loads(readLine(i3status))
  versionHeader['click_events'] = True
  printLine(json.dumps(versionHeader))

  # The second line contains the start of the infinite array; just pass it
  # through to i3bar.
  printLine(readLine(i3status))

  while True:
    netStats.update()

    prefix, line = '', readLine(i3status)
    
    # Ignore comma at start of lines.
    if line.startswith(','):
      prefix, line = ',', line[1:]

    j = json.loads(line)
    
    # Insert information into the start of the json. For brightness, only
    # add the brightness indicator if getBrightness() returns a non-error
    # value.
    brightnessFraction = light.getBrightness()
    if brightnessFraction >= 0:
      j.insert(0, {
        'full_text' : u' ☼%s%s%s' % (
            numformat.RIGHT_BAR,
            numformat.roundToVerticalBar(brightnessFraction),
            numformat.LEFT_BAR),
        'name' : 'backlight'})

    # Dress up the JSON with some bar charts.
    for entry in j:
      name = entry['name']
      text = entry['full_text']

      if name == 'volume' or name == 'battery':
        entry['full_text'] = replaceYesNoWithPlusMinus(
            numformat.replacePercentageWithBar(text))

      if name == 'wireless':
        wirelessUp = ': no ' not in text
        text = replaceYesNoWithPlusMinus(
            numformat.replacePercentageWithBar(text))
        if wirelessUp:
          wirelessStats = netStats.interfaces[netusage.WIRELESS_INTERFACE]
          text = u'%s%s↓ %s↑ ' % (
              text,
              formatByteRate(wirelessStats.rxBytes.rate),
              formatByteRate(wirelessStats.txBytes.rate))
        entry['full_text'] = text

      elif name == 'ethernet':
        ethernetUp = ': no ' not in text
        text = replaceYesNoWithPlusMinus(text)
        # If gigabit ethernet is not enabled, set an annoying color.
        gigabit = '1000 Mbit/s' in text
        text = string.replace(text, ' 1000 Mbit/s', '')
        if ethernetUp:
          ethernetStats = netStats.interfaces[netusage.ETHERNET_INTERFACE]
          if not gigabit:
            entry['color'] = YELLOW
          text = u'%s%s↓ %s↑ ' % (
              text,
              formatByteRate(ethernetStats.rxBytes.rate),
              formatByteRate(ethernetStats.txBytes.rate))
        entry['full_text'] = text

      elif name == 'run_watch':
        # VPN.
        entry['full_text'] = replaceYesNoWithPlusMinus(text)

      elif name == 'cpu_usage':
        # Parse the CPU percentage and add it to the rolling list.
        cpuBar = numformat.roundToVerticalBar(
            float(numformat.stripNonDigits(text)) * 0.01)
        cpuGraph = cpuGraph[1:] + cpuBar
        # Append the graph to the displayed text.
        entry['full_text'] = ' ' + cpuGraph + numformat.LEFT_BAR + text

      elif name == 'time':
        # Strip unnecessary leading zeros from day and month.
        m = re.search(datePattern, text)
        if m:
          dateText = m.group(0)
          shortDateText = string.replace(dateText, ' 0', ' ')
          shortDateText = string.replace(shortDateText, '-0', '-')
          entry['full_text'] = string.replace(text, dateText, shortDateText)
    
    # Echo back new encoded json.
    printLine(prefix + json.dumps(j))


def service_stdin():
  """ Reads click event lines from stdin. These come from i3bar. """
  # The first line contains the start of the infinite array; ignore it.
  readLine(sys.stdin)

  while True:
    line = readLine(sys.stdin)
    
    # Ignore comma at start of lines.
    if line.startswith(','):
      line = line[1:]
    j = json.loads(line)
    name = j['name']
    instance = j['instance']

    if name == 'volume':
      subprocess.call('kmix', shell=True)
    elif name == 'battery':
      # gnome-control-center contains power settings.
      subprocess.call('gnome-control-center', shell=True)
    elif name == 'run_watch' and string.find(string.lower(instance), 'vpn'):
      # Any machine with a VPN entry in its i3status should have a vpn-ui
      # command.
      subprocess.call('vpn-ui', shell=True)
    elif name == 'time':
      subprocess.call('gcalendar', shell=True)


if __name__ == '__main__':
  # Spawn a separate thread to service click events from i3bar.
  childThread = threading.Thread(target=service_stdin)
  childThread.start()
  service_i3status()
  # service_i3status should never return, so this statement is somewhat
  # pointless. I include it for completeness.
  childThread.join()
