#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Prefixes each i3status line with some custom information. Adapted from
#   http://code.stapelberg.de/git/i3status/tree/contrib/wrapper.py
#
# To use it, ensure your ~/.i3status.conf contains this line:
#     output_format = "i3bar"
# in the 'general' section.
# Then, in the 'bar' section of your ~/.i3/config, use:
#     status_command i3status-wrapper

import sys
import json
import math
import subprocess
import threading
import re
import string
from backlight import Backlight

CPU_HISTORY_LEN = 12
LEFT_BAR  = u'▏'
RIGHT_BAR = u'▕'

light = Backlight()


def readLine(f):
  """ Reads one line of text from file 'f'. """
  # Try reading a line, removing any extra whitespace.
  try:
    line = f.readline().strip()
    # This method is used to read text printed by i3status and i3bar. When these
    # programs send EOF or an empty line, it means we should exit.
    if not line:
      sys.exit(3)
    return line
  # Exit on ctrl-C.
  except KeyboardInterrupt:
    sys.exit()


def printLine(message):
  """ Non-buffered printing to stdout. """
  sys.stdout.write(message + '\n')
  sys.stdout.flush()


def roundToBar(fraction):
  """ Fetches the closest bar character for the given fraction. """
  if fraction <= 0.01:
    # Prevent non-positive values.
    fraction = 0.01
  elif fraction > 1:
    fraction = 1
  # We always want bar graphs to show at least a sliver along the bottom. So
  # we round up to the next fraction of 8.
  index = int(math.ceil(fraction * 8))
  return u' ▁▂▃▄▅▆▇█'[index]


def stripNonDigits(text):
  """ Strips non-digit characters from the beginning and end of text. """
  begin = 0
  end = len(text) - 1
  while begin <= end and not text[begin].isdigit():
    begin += 1
  while begin <= end and not text[end].isdigit():
    end -= 1
  return text[begin:end+1]


# Pattern for matching percentages. Note the leading and trailing spaces.
percentagePattern = re.compile(r' ?[0-9]+\% ')
def replacePercentageWithVerticalBar(text):
  """ Replaces the first occurrence of a percentage (like XXX%) in 'text'
  with a vertical bar-graph that represents the same quanitity. The bar graph
  will take up 2 characters. Returns the resulting text. If the percentage is
  preceded or followed by a space, the space(s) will be removed when the
  percentage is replaced by the bar graph.
  """
  m = re.search(percentagePattern, text)
  if m is None:
    return text
  percentageText = m.group(0)
  barGraph = RIGHT_BAR + roundToBar(
      float(stripNonDigits(percentageText)) * 0.01) + LEFT_BAR
  return string.replace(text, percentageText, barGraph, 1)


def replaceYesNoWithPlusMinus(text):
  """ Replaces "yes" with "+" and "no" with "-" to save space. """
  text = string.replace(text, ': yes', '+')
  text = string.replace(text, ': no', '-')
  return text


def service_i3status():
  """ Runs i3status as a subprocess and passes the output to stdout, making
  some modifications to add cool features that i3status doesn't support.
  """
  # Run i3status and capture its output.
  i3status = subprocess.Popen("i3status", stdout=subprocess.PIPE,
                              shell=True).stdout

  # Keep a little history of CPU usages to display in a bar graph. This history
  # is actually just a string of bar-graph characters.
  cpuGraph = roundToBar(0) * CPU_HISTORY_LEN

  # The first line from i3status is the version header. Modify the header
  # to enable click events, and then send it out to i3bar.
  versionHeader = json.loads(readLine(i3status))
  versionHeader['click_events'] = True
  printLine(json.dumps(versionHeader))

  # The second line contains the start of the infinite array; just pass it
  # through to i3bar.
  printLine(readLine(i3status))

  while True:
    prefix, line = '', readLine(i3status)
    
    # Ignore comma at start of lines.
    if line.startswith(','):
      prefix, line = ',', line[1:]

    j = json.loads(line)
    
    # Insert information into the start of the json. For brightness, only
    # add the brightness indicator if getBrightness() returns a non-error
    # value.
    brightnessFraction = light.getBrightness()
    if brightnessFraction >= 0:
      j.insert(0, {
        'full_text' : u' ☼%s%s%s' % (
            RIGHT_BAR, roundToBar(brightnessFraction), LEFT_BAR),
        'name' : 'backlight'})

    # Dress up the JSON with some bar charts.
    for entry in j:
      name = entry['name']
      text = entry['full_text']

      if name == 'volume' or name == 'wireless':
        entry['full_text'] = replacePercentageWithVerticalBar(text)
      elif name == 'ethernet' or name == 'run_watch':
        entry['full_text'] = replaceYesNoWithPlusMinus(text)  
      elif name == 'cpu_usage':
        # Parse the CPU percentage and add it to the rolling list.
        cpuBar = roundToBar(float(stripNonDigits(text)) * 0.01)
        cpuGraph = cpuGraph[1:] + cpuBar

        # Append the graph to the displayed text.
        entry['full_text'] = ' ' + cpuGraph + LEFT_BAR + text
    
    # Echo back new encoded json.
    printLine(prefix + json.dumps(j))


def service_stdin():
  """ Reads click event lines from stdin. These come from i3bar. """
  # The first line contains the start of the infinite array; ignore it.
  readLine(sys.stdin)

  while True:
    line = readLine(sys.stdin)
    
    # Ignore comma at start of lines.
    if line.startswith(','):
      line = line[1:]
    j = json.loads(line)

    if j['name'] == 'volume':
      subprocess.call('kmix', shell=True)
    elif j['name'] == 'battery':
      # gnome-control-center contains power settings.
      subprocess.call('gnome-control-center', shell=True)
    # TODO: Add some more handlers for other parts of the i3bar.


if __name__ == '__main__':
  # Spawn a separate thread to service click events from i3bar.
  childThread = threading.Thread(target=service_stdin)
  childThread.start()
  service_i3status()
  # service_i3status should never return, so this statement is somewhat
  # pointless. I include it for completeness.
  childThread.join()
